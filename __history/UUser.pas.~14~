unit UUser;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, cxGraphics, cxControls, cxLookAndFeels,
  cxLookAndFeelPainters, dxSkinsCore, dxSkinBasic, dxSkinBlack, dxSkinBlue,
  dxSkinBlueprint, dxSkinCaramel, dxSkinCoffee, dxSkinDarkroom, dxSkinDarkSide,
  dxSkinDevExpressDarkStyle, dxSkinDevExpressStyle, dxSkinFoggy,
  dxSkinGlassOceans, dxSkinHighContrast, dxSkiniMaginary, dxSkinLilian,
  dxSkinLiquidSky, dxSkinLondonLiquidSky, dxSkinMcSkin, dxSkinMetropolis,
  dxSkinMetropolisDark, dxSkinMoneyTwins, dxSkinOffice2007Black,
  dxSkinOffice2007Blue, dxSkinOffice2007Green, dxSkinOffice2007Pink,
  dxSkinOffice2007Silver, dxSkinOffice2010Black, dxSkinOffice2010Blue,
  dxSkinOffice2010Silver, dxSkinOffice2013DarkGray, dxSkinOffice2013LightGray,
  dxSkinOffice2013White, dxSkinOffice2016Colorful, dxSkinOffice2016Dark,
  dxSkinOffice2019Black, dxSkinOffice2019Colorful, dxSkinOffice2019DarkGray,
  dxSkinOffice2019White, dxSkinPumpkin, dxSkinSeven, dxSkinSevenClassic,
  dxSkinSharp, dxSkinSharpPlus, dxSkinSilver, dxSkinSpringtime, dxSkinStardust,
  dxSkinSummer2008, dxSkinTheAsphaltWorld, dxSkinTheBezier,
  dxSkinsDefaultPainters, dxSkinValentine, dxSkinVisualStudio2013Blue,
  dxSkinVisualStudio2013Dark, dxSkinVisualStudio2013Light, dxSkinVS2010,
  dxSkinWhiteprint, dxSkinXmas2008Blue, cxStyles, cxCustomData, cxFilter,
  cxData, cxDataStorage, cxEdit, cxNavigator, dxDateRanges,
  dxScrollbarAnnotations, Data.DB, cxDBData, Data.Win.ADODB, cxGridLevel,
  cxClasses, cxGridCustomView, cxGridCustomTableView, cxGridTableView,
  cxGridDBTableView, cxGrid, ConnectionModule, Vcl.Menus, cxButtonEdit,
  cxContainer, cxTextEdit, cxMaskEdit, dxBarBuiltInMenu, cxGridCustomPopupMenu,
  cxGridPopupMenu, UEditUser, IdHTTP;

type
  TFrmUser = class(TForm)
    cxGrid1DBTableView1: TcxGridDBTableView;
    cxGrid1Level1: TcxGridLevel;
    cxGrid1: TcxGrid;
    QryUser: TADOQuery;
    DataSource1: TDataSource;
    cxGrid1DBTableView1Column1: TcxGridDBColumn;
    cxGrid1DBTableView1Column2: TcxGridDBColumn;
    cxGrid1DBTableView1Column3: TcxGridDBColumn;
    cxGrid1DBTableView1Column4: TcxGridDBColumn;
    cxGrid1DBTableView1Column5: TcxGridDBColumn;
    cxGrid1DBTableView1Column6: TcxGridDBColumn;
    cxGrid1DBTableView1Column7: TcxGridDBColumn;
    cxGrid1DBTableView1Column8: TcxGridDBColumn;
    cxGrid1DBTableView1Column9: TcxGridDBColumn;
    cxGrid1DBTableView1Column10: TcxGridDBColumn;
    cxGrid1DBTableView1Column11: TcxGridDBColumn;
    PopupMenu1: TPopupMenu;
    Edit1: TMenuItem;
    Edit2: TMenuItem;
    cxGridPopupMenu1: TcxGridPopupMenu;
    ActivateUser1: TMenuItem;
    procedure FormShow(Sender: TObject);
    procedure Edit2Click(Sender: TObject);
    procedure Edit1Click(Sender: TObject);
    procedure ActivateUser1Click(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  FrmUser: TFrmUser;

implementation

{$R *.dfm}

procedure TFrmUser.ActivateUser1Click(Sender: TObject);
var
  ARecordIndex: Integer;
  Status: Variant;
  UserId: Variant;
  Confirmation: Integer;
  HTTP: TIdHTTP;
  ResponseContent: string;
  IniFile: TIniFile;
  DLLFolder: string;
begin
  ARecordIndex := cxGrid1DBTableView1.Controller.FocusedRowIndex;
  Status := cxGrid1DBTableView1.DataController.Values[ARecordIndex, cxGrid1DBTableView1Column8.Index];
  UserId := cxGrid1DBTableView1.DataController.Values[ARecordIndex, cxGrid1DBTableView1Column11.Index];

  if Status <> 'Active' then
  begin
    if not VarIsNull(Status) then
    begin
      Confirmation := MessageDlg('Are you sure you want to activate this user?', mtConfirmation, [mbYes, mbNo], 0);
      if Confirmation = mrYes then
      begin
         HTTP := TIdHTTP.Create(nil);
         DLLFolder := ExtractFilePath(GetModuleName(HInstance));
         IniFile := TIniFile.Create(IncludeTrailingPathDelimiter(DLLFolder) + 'MyConfig.ini');
          try
            try
              var endpoint := IniFile.ReadString('RTWEBAPIEndPoint', 'confirmRegistration', '');
              ResponseContent := HTTP.Get(endpoint + UserId);
              // Handle the response content if needed
              ShowMessage('API response: ' + ResponseContent);
            except
              on E: Exception do
                ShowMessage('Error calling API: ' + E.Message);
            end;
          finally
            HTTP.Free;
            IniFile.Free;
          end;
      end;
    end;
  end;

end;

procedure TFrmUser.Edit1Click(Sender: TObject);
var
  ARecordIndex: Integer;
  IDValue: Variant;
begin
   FrmEdit := TFrmEdit.Create(Application);
   try
     ARecordIndex := cxGrid1DBTableView1.Controller.FocusedRowIndex;

     FrmEdit.txtCustomerId.Text := cxGrid1DBTableView1.DataController.Values[ARecordIndex, cxGrid1DBTableView1Column9.Index];
     FrmEdit.txtFirstName.Text := cxGrid1DBTableView1.DataController.Values[ARecordIndex, cxGrid1DBTableView1Column1.Index];
     FrmEdit.txtSurname.Text := cxGrid1DBTableView1.DataController.Values[ARecordIndex, cxGrid1DBTableView1Column2.Index];
     FrmEdit.txtCompanyName.Text := cxGrid1DBTableView1.DataController.Values[ARecordIndex, cxGrid1DBTableView1Column3.Index];
     FrmEdit.txtAccNo.Text := cxGrid1DBTableView1.DataController.Values[ARecordIndex, cxGrid1DBTableView1Column4.Index];
     FrmEdit.txtContactno.Text := cxGrid1DBTableView1.DataController.Values[ARecordIndex, cxGrid1DBTableView1Column6.Index];
     FrmEdit.ShowModal;

   finally
     FrmEdit.Free;
     QryUser.Close;
     QryUser.Open;
   end;
end;

procedure TFrmUser.Edit2Click(Sender: TObject);
var
  ARecordIndex: Integer;
  IDValue: Variant;
  Confirmation: Integer;
begin
  ARecordIndex := cxGrid1DBTableView1.Controller.FocusedRowIndex;
  IDValue := cxGrid1DBTableView1.DataController.Values[ARecordIndex, cxGrid1DBTableView1Column9.Index];

  if not VarIsNull(IDValue) then
  begin
    Confirmation := MessageDlg('Are you sure you want to delete this record?', mtConfirmation, [mbYes, mbNo], 0);

    // If user confirms deletion, execute the SQL DELETE statement
    if Confirmation = mrYes then
    begin
        var
          SQLQuery: string;
          SQLQuery := 'DELETE FROM [dbo].[Customers] WHERE ID = :ID';
          var
            Query: TADOQuery;
            Query := TADOQuery.Create(nil);
          try
            query.Connection := GetADOConnection;
            Query.SQL.Text := SQLQuery;
            Query.Parameters.ParamByName('ID').Value := IDValue;
            Query.ExecSQL;
          finally
            Query.Free;
            Query.Close;

            QryUser.Close;
            QryUser.Open;
          end;
    end;
  end
  else
  begin
    ShowMessage('No record selected.');
  end;

end;

procedure TFrmUser.FormShow(Sender: TObject);
begin
      QryUser.Connection := GetADOConnection;
      QryUser.Open;
end;

end.
